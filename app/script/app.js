// Generated by CoffeeScript 1.4.0
(function() {
  var all, canvas, graph, vectors;

  all = {
    text: ""
  };

  graph = {};

  vectors = [];

  canvas = {};

  window.getCanvas = function() {
    return canvas;
  };

  $(document).ready(function() {
    var current, overlay;
    overlay = $("#overlay");
    canvas = Raphael(overlay.get(0));
    graph = [];
    chrome.history.search(all, function(history) {
      var link, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = history.length; _i < _len; _i++) {
        link = history[_i];
        console.log("Link loop");
        _results.push(chrome.history.getVisits({
          'url': link.url
        }, function(visits) {
          var key, vertex, visit, _j, _len1;
          console.log(visits);
          for (_j = 0, _len1 = visits.length; _j < _len1; _j++) {
            visit = visits[_j];
            console.log(visit.referringVisitId);
            graph[visit.visitId] = {
              url: link.url,
              title: link.title,
              time: link.lastVisitTime,
              parent: visit.referringVisitId,
              children: []
            };
          }
          console.log("after visit loop");
          console.log(graph);
          for (key in graph) {
            vertex = graph[key];
            if (!(vertex.parent !== '0')) {
              continue;
            }
            console.log(vertex);
            graph[vertex.parent].children.push(vertex.id);
          }
          console.log("After graph push");
          return graph;
        }).then(function(graph) {
          console.log(graph);
          return graph;
        }));
      }
      return _results;
    });
    current = {
      time: 0
    };
    return chrome.tabs.query({}, function(tabs) {
      var tab, vertex, _i, _j, _len, _len1, _results;
      _results = [];
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        tab = tabs[_i];
        for (_j = 0, _len1 = graph.length; _j < _len1; _j++) {
          vertex = graph[_j];
          if (vertex.url === tab.url) {
            if (vertex.time > current_newest.time) {
              current = vertex;
            }
          }
        }
        _results.push(CreateVector(current));
      }
      return _results;
    });
  });

  window.CreateVector = function(vertex) {
    var $vector, left, recurse;
    left = vectors.length * 220;
    $vector = $("<div/>", {
      "class": 'vector',
      style: "left: " + left + "px; top: 0;"
    });
    $("#overlay").append($vector);
    recurse = function(vertex) {
      $vector.append(BuildDiv(vertex.time, vertex.title, vertex.url));
      if (vertex.parent != null) {
        return recurse(graph[vertex.parent]);
      }
    };
    recurse(vertex);
    return vectors.push($vector);
  };

  window.BuildDiv = function(bottomTime, title, url) {
    var $rect;
    $rect = $("<div/>", {
      "class": "link",
      text: "" + title
    });
    return $rect;
  };

  /*
  	HistoryItem
  
  	id ( string )
  		The unique identifier for the item.
  	url ( optional string )
  		The URL navigated to by a user.
  	title ( optional string )
  		The title of the page when it was last loaded.
  	lastVisitTime ( optional double )
  		When this page was last loaded, represented in milliseconds since the epoch.
  	visitCount ( optional integer )
  		The number of times the user has navigated to this page.
  	typedCount ( optional integer )
  		The number of times the user has navigated to this page by typing in the address.
  
  	VisitItem
  
  	id ( string )
  		The unique identifier for the item.
  	visitId ( string )
  		The unique identifier for this visit.
  	visitTime ( optional double )
  		When this visit occurred, represented in milliseconds since the epoch.
  	referringVisitId ( string )
  		The visit ID of the referrer.
  */


}).call(this);
