// Generated by CoffeeScript 1.4.0
(function() {
  var all, alreadyDisplayed, buildArrow, graph, maxTime, overlay, vectors;

  all = {
    text: ""
  };

  graph = {};

  vectors = [];

  alreadyDisplayed = [];

  overlay = null;

  maxTime = 0;

  window.getOverlay = function() {
    return overlay;
  };

  $(document).ready(function() {
    var $overlay, build, initialize;
    $overlay = $("#overlay");
    overlay = Raphael($overlay.get(0));
    build = function(graph) {
      var id, key, vertex, _results;
      for (id in graph) {
        vertex = graph[id];
        if ((graph["" + vertex.parent] != null) && vertex.parent !== '0') {
          graph["" + vertex.parent].children.push(id);
        }
      }
      for (key in graph) {
        vertex = graph[key];
        if (vertex.time > maxTime) {
          maxTime = vertex.time;
        }
      }
      /*
      		var sortable = [];
      		for vertex in Graph
      			sortable.push([vehicle, maxSpeed[vehicle]])
      		sortable.sort(function(a, b) {return a[1] - b[1]})
      */

      Object.keys(graph).sort(function(a, b) {
        return -(graph[a].time - graph[b].time);
      });
      chrome.tabs.query({}, function(tabs) {
        var current, tab, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tabs.length; _i < _len; _i++) {
          tab = tabs[_i];
          current = {
            time: 0
          };
          for (key in graph) {
            vertex = graph[key];
            if (vertex.url === tab.url) {
              if (vertex.time > current["time"]) {
                current = vertex;
                current.id = key;
                current.title = tab.title;
              }
            }
          }
          CreateVector(current, 60);
          _results.push(alreadyDisplayed.push(current));
        }
        return _results;
      });
      console.log(graph);
      _results = [];
      for (key in graph) {
        vertex = graph[key];
        if (!(!vertex.displayed && vertex.children.length === 0 && !indexOf(vertex.visitId))) {
          continue;
        }
        console.log(vertex);
        _results.push(CreateVector(vertex));
      }
      return _results;
    };
    initialize = function(history) {
      var makeGraph, visit;
      graph = {};
      makeGraph = function(visits, link) {
        var visit, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = visits.length; _i < _len; _i++) {
          visit = visits[_i];
          _results.push(graph[visit.visitId] = {
            url: link.url,
            title: link.title,
            time: link.lastVisitTime,
            parent: visit.referringVisitId,
            displayed: false,
            children: []
          });
        }
        return _results;
      };
      visit = function(history) {
        return async.map(history, (function(link, callback) {
          return chrome.history.getVisits({
            'url': link.url
          }, function(visits) {
            makeGraph(visits, link);
            return callback(null, true);
          });
        }), function(err, results) {
          return build(graph);
        });
      };
      return visit(history);
    };
    return chrome.history.search(all, function(history) {
      return initialize(history);
    });
  });

  window.CreateVector = function(vertex, top) {
    var $vector, left, recurse;
    left = vectors.length * 211;
    console.log(top);
    if (top !== 60) {
      top = 60 + Math.pow(maxTime - vertex.time, 1 / 3);
    }
    console.log(top);
    if ($(document).width() < left + 211) {
      $("header").width("" + (left + 211) + "px");
    } else {
      $("header").width("100%");
    }
    $vector = $("<div/>", {
      "class": 'vector',
      style: "left: " + left + "px; top:" + top + "px;"
    });
    $("#overlay").append($vector);
    recurse = function(vertex) {
      var child, key, v, _i, _len, _ref;
      for (key in graph) {
        v = graph[key];
        if (v === vertex) {
          vertex.id = key;
        }
      }
      ({
        displayed: true
      });
      $vector.append(BuildDiv(vertex.time, vertex.title, vertex.url, vertex.id));
      _ref = vertex.children;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        if (graph[child] != null) {
          if (vertex.id != null) {
            buildArrow(vertex.id, child, left);
          }
        }
      }
      if ((graph[vertex.parent] != null) && vertex.parent !== '0') {
        return recurse(graph[vertex.parent]);
      }
    };
    recurse(vertex);
    return vectors.push($vector);
  };

  window.BuildDiv = function(bottomTime, title, url, id) {
    var $a, $div;
    if (id != null) {
      $div = $("<div/>", {
        "class": "fading link",
        id: id,
        text: title
      });
      return $a = $("<a/>", {
        href: url
      }).append($div);
    }
  };

  buildArrow = function(from, to, left) {
    var f, p, t;
    f = $("#" + from).position();
    t = $("#" + to).position();
    if ((f != null) && (t != null) && false) {
      p = overlay.path("M" + (f.left + left + 100) + "," + f.top + "L" + (t.left + left + 100) + "," + t.top);
      return p.attr({
        "arrow-end": "classic-wide-long"
      });
    }
  };

}).call(this);
