// Generated by CoffeeScript 1.6.1
(function() {
  var all, buildArrow, graph, overlay, vectors;

  all = {
    text: ""
  };

  graph = {};

  vectors = [];

  overlay = null;

  window.getOverlay = function() {
    return overlay;
  };

  $(document).ready(function() {
    var $overlay, build, initialize;
    $overlay = $("#overlay");
    overlay = Raphael($overlay.get(0));
    build = function(graph) {
      var id, vertex;
      for (id in graph) {
        vertex = graph[id];
        if ((graph["" + vertex.parent] != null) && vertex.parent !== '0') {
          graph["" + vertex.parent].children.push(id);
        }
      }
      console.log(graph);
      return chrome.tabs.query({}, function(tabs) {
        var current, key, tab, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tabs.length; _i < _len; _i++) {
          tab = tabs[_i];
          console.log(tab);
          current = {
            time: 0
          };
          for (key in graph) {
            vertex = graph[key];
            if (vertex.url === tab.url) {
              if (vertex.time > current["time"]) {
                current = vertex;
                current.id = key;
                current.title = tab.title;
              }
            }
          }
          console.log("first-title:", current.title);
          _results.push(CreateVector(current));
        }
        return _results;
      });
    };
    initialize = function(history) {
      var makeGraph, visit;
      graph = {};
      makeGraph = function(visits, link) {
        var visit, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = visits.length; _i < _len; _i++) {
          visit = visits[_i];
          _results.push(graph[visit.visitId] = {
            url: link.url,
            title: link.title,
            time: link.lastVisitTime,
            parent: visit.referringVisitId,
            children: []
          });
        }
        return _results;
      };
      visit = function(history) {
        return async.map(history, (function(link, callback) {
          return chrome.history.getVisits({
            'url': link.url
          }, function(visits) {
            makeGraph(visits, link);
            return callback(null, true);
          });
        }), function(err, results) {
          return build(graph);
        });
      };
      return visit(history);
    };
    return chrome.history.search(all, function(history) {
      return initialize(history);
    });
  });

  window.CreateVector = function(vertex) {
    var $vector, left, recurse;
    left = vectors.length * 212;
    $vector = $("<div/>", {
      "class": 'vector',
      style: "left: " + left + "px; top:60px;"
    });
    $("#overlay").append($vector);
    recurse = function(vertex) {
      $vector.append(BuildDiv(vertex.time, vertex.title, vertex.url, vertex.id));
      if ((graph[vertex.parent] != null) && vertex.parent !== '0') {
        return recurse(graph[vertex.parent]);
      }
    };
    recurse(vertex);
    return vectors.push($vector);
  };

  window.BuildDiv = function(bottomTime, title, url, id) {
    var $a, $div;
    console.log("title:", title);
    $div = $("<div/>", {
      "class": "fading link",
      id: id,
      text: title
    });
    return $a = $("<a/>", {
      href: url
    }).append($div);
  };

  buildArrow = function(from, to) {
    var raph;
    console.log(from);
    console.log(to);
    raph = window.getOverlay();
    return raph.path("M" + (from.position().left) + "," + (from.position().top) + "L" + (to.position().left) + "," + (to.position().top));
  };

}).call(this);
